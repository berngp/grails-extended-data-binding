import org.springframework.mock.web.MockHttpServletRequestimport org.codehaus.groovy.grails.web.servlet.GrailsApplicationAttributes as GAAimport grails.test.GroovyPagesTestCaseimport br.inf.freeit.extendeddatabinding.WrappedBean
class ExtendedDataBindingTagLibTests extends GroovyPagesTestCase {
		def controller		void setUp() {		super.setUp()		controller = [wrapBean:{new WrappedBean(it)}]	}		void testMissingBean() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller				shouldFail { taglib.wrap(var:"newBeanWrapper") }	}		void testMissingVar() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller				shouldFail { taglib.wrap(bean:[:]) }	}		void testWrapDefaultScope() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller				def bean = new Object()		String contents = new ExtendedDataBindingTagLib().wrap(bean:bean, var:"newBean")		assert contents == ""		def newBean = taglib.pageScope.newBean		assert newBean instanceof WrappedBean		assertSame bean, newBean.getWrappedInstance()
	}
		void testWrapPageScope() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller				def bean = new Object()		String contents = new ExtendedDataBindingTagLib().wrap(bean:bean, var:"newBean", scope:"page")		assert contents == ""		def newBean = taglib.pageScope.newBean		assert newBean instanceof WrappedBean		assertSame bean, newBean.getWrappedInstance()	}		void testWrapRequestScope() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller				def bean = new Object()		String contents = new ExtendedDataBindingTagLib().wrap(bean:bean, var:"newBean", scope:"request")		assert contents == ""		def newBean = taglib.request.newBean		assert newBean instanceof WrappedBean		assertSame bean, newBean.getWrappedInstance()	}		void testWrapSessionScope() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller				def bean = new Object()		String contents = new ExtendedDataBindingTagLib().wrap(bean:bean, var:"newBean", scope:"session")		assert contents == ""		def newBean = taglib.session.newBean		assert newBean instanceof WrappedBean		assertSame bean, newBean.getWrappedInstance()	}		void testWrapApplicationScope() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller				def bean = new Object()		String contents = new ExtendedDataBindingTagLib().wrap(bean:bean, var:"newBean", scope:"application")		assert contents == ""		def newBean = taglib.servletContext.newBean		assert newBean instanceof WrappedBean		assertSame bean, newBean.getWrappedInstance()	}	void testEachWrapped() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller		int index = 0		def beans = [new Object(), new Object(), new Object()]		def attrs = [:]		attrs."in" = beans		attrs.var = "bean"		taglib.eachWrapped(attrs) { model ->			assertNotNull model			assert model.bean instanceof WrappedBean			assertSame beans[index], model.bean.getWrappedInstance()			index++		}		assertEquals beans.size(), index	}	void testEachWrappedWithStatus() {		def taglib = new ExtendedDataBindingTagLib()		taglib.request[GAA.CONTROLLER] = controller		int index = 0		def beans = [new Object(), new Object(), new Object()]		def attrs = [:]		attrs."in" = beans		attrs.var = "bean"		attrs.status = "idx"		taglib.eachWrapped(attrs) { model ->			assertNotNull model			assert model.bean instanceof WrappedBean			assertSame beans[index], model.bean.getWrappedInstance()			assertEquals index, model.idx			index++		}		assertEquals beans.size(), index	}	}